/**
 * Base API
 * Base API Definition.
 *
 * OpenAPI spec version: 0.316.0
 * Contact: hambardzumyan.albert@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CrmAccount } from '../model/crmAccount';
import { CrmAccountBase } from '../model/crmAccountBase';
import { CrmAccountBasePopulated } from '../model/crmAccountBasePopulated';
import { CrmAccountContact } from '../model/crmAccountContact';
import { CrmAccountContactBase } from '../model/crmAccountContactBase';
import { CrmAccountContactBasePopulated } from '../model/crmAccountContactBasePopulated';
import { CrmAccountContactLabels } from '../model/crmAccountContactLabels';
import { CrmAccountContactLabelsPopulated } from '../model/crmAccountContactLabelsPopulated';
import { CrmAccountContactSalesInfo } from '../model/crmAccountContactSalesInfo';
import { CrmAccountCreditInfo } from '../model/crmAccountCreditInfo';
import { CrmAccountLabels } from '../model/crmAccountLabels';
import { CrmAccountLabelsPopulated } from '../model/crmAccountLabelsPopulated';
import { CrmAccountLocation } from '../model/crmAccountLocation';
import { CrmAccountLocationBase } from '../model/crmAccountLocationBase';
import { CrmAccountLocationBasePopulated } from '../model/crmAccountLocationBasePopulated';
import { CrmAccountLocationLabels } from '../model/crmAccountLocationLabels';
import { CrmAccountLocationLabelsPopulated } from '../model/crmAccountLocationLabelsPopulated';
import { CrmAccountLocationSalesInfo } from '../model/crmAccountLocationSalesInfo';
import { CrmAccountPaymentInfo } from '../model/crmAccountPaymentInfo';
import { CrmAccountSalesInfo } from '../model/crmAccountSalesInfo';
import { CrmAccountsPopulated } from '../model/crmAccountsPopulated';
import { CrmContactsPopulated } from '../model/crmContactsPopulated';
import { CrmLocationsPopulated } from '../model/crmLocationsPopulated';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CrmService {

    protected basePath = 'http://base-api-development.buychain.tech/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add crm-account.
     * Add crm-account. Default access - none.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCrmAccount(payload: CrmAccount, observe?: 'body', reportProgress?: boolean): Observable<CrmAccount>;
    public addCrmAccount(payload: CrmAccount, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccount>>;
    public addCrmAccount(payload: CrmAccount, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccount>>;
    public addCrmAccount(payload: CrmAccount, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addCrmAccount.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CrmAccount>(`${this.basePath}/crm/accounts`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add crm-account contact.
     * Add crm-account contact. Default access - none.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCrmAccountContact(id: string, payload: CrmAccountContact, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountContact>;
    public addCrmAccountContact(id: string, payload: CrmAccountContact, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountContact>>;
    public addCrmAccountContact(id: string, payload: CrmAccountContact, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountContact>>;
    public addCrmAccountContact(id: string, payload: CrmAccountContact, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addCrmAccountContact.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addCrmAccountContact.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CrmAccountContact>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/contacts`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add crm-account location.
     * Add crm-account location. Default access - none.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCrmAccountLocation(id: string, payload: CrmAccountLocation, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountLocation>;
    public addCrmAccountLocation(id: string, payload: CrmAccountLocation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountLocation>>;
    public addCrmAccountLocation(id: string, payload: CrmAccountLocation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountLocation>>;
    public addCrmAccountLocation(id: string, payload: CrmAccountLocation, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addCrmAccountLocation.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addCrmAccountLocation.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CrmAccountLocation>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/locations`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-account contact sales-info.
     * Get crm-account contact sales-info. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param contactId Crm-contact id - hex, ref Crm-Contacts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmAccountContactSalesInfo(id: string, contactId: string, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountContactSalesInfo>;
    public getCrmAccountContactSalesInfo(id: string, contactId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountContactSalesInfo>>;
    public getCrmAccountContactSalesInfo(id: string, contactId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountContactSalesInfo>>;
    public getCrmAccountContactSalesInfo(id: string, contactId: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCrmAccountContactSalesInfo.');
        }

        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling getCrmAccountContactSalesInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmAccountContactSalesInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/contacts/${encodeURIComponent(String(contactId))}/sales-info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-account credit-info.
     * Get crm-account credit-info. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmAccountCreditInfo(id: string, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountCreditInfo>;
    public getCrmAccountCreditInfo(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountCreditInfo>>;
    public getCrmAccountCreditInfo(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountCreditInfo>>;
    public getCrmAccountCreditInfo(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCrmAccountCreditInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmAccountCreditInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/credit-info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-account location sales-info.
     * Get crm-account location sales-info. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param locationId Crm-location id - hex, ref Crm-Locations.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmAccountLocationSalesInfo(id: string, locationId: string, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountLocationSalesInfo>;
    public getCrmAccountLocationSalesInfo(id: string, locationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountLocationSalesInfo>>;
    public getCrmAccountLocationSalesInfo(id: string, locationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountLocationSalesInfo>>;
    public getCrmAccountLocationSalesInfo(id: string, locationId: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCrmAccountLocationSalesInfo.');
        }

        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getCrmAccountLocationSalesInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmAccountLocationSalesInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/locations/${encodeURIComponent(String(locationId))}/sales-info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-account payment-info.
     * Get crm-account payment-info. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmAccountPaymentInfo(id: string, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountPaymentInfo>;
    public getCrmAccountPaymentInfo(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountPaymentInfo>>;
    public getCrmAccountPaymentInfo(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountPaymentInfo>>;
    public getCrmAccountPaymentInfo(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCrmAccountPaymentInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmAccountPaymentInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/payment-info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-account sales-info.
     * Get crm-account sales-info. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmAccountSalesInfo(id: string, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountSalesInfo>;
    public getCrmAccountSalesInfo(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountSalesInfo>>;
    public getCrmAccountSalesInfo(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountSalesInfo>>;
    public getCrmAccountSalesInfo(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCrmAccountSalesInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmAccountSalesInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/sales-info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-accounts.
     * Get crm-accounts. Default access - resource:owner.
     * @param archived Archived.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmAccounts(archived?: boolean, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountsPopulated>;
    public getCrmAccounts(archived?: boolean, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountsPopulated>>;
    public getCrmAccounts(archived?: boolean, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountsPopulated>>;
    public getCrmAccounts(archived?: boolean, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (archived !== undefined && archived !== null) {
            queryParameters = queryParameters.set('archived', <any>archived);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmAccountsPopulated>(`${this.basePath}/crm/accounts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-contacts.
     * Get crm-contacts. Default access - resource:owner.
     * @param archived Archived.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmContacts(archived?: boolean, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<CrmContactsPopulated>;
    public getCrmContacts(archived?: boolean, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmContactsPopulated>>;
    public getCrmContacts(archived?: boolean, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmContactsPopulated>>;
    public getCrmContacts(archived?: boolean, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (archived !== undefined && archived !== null) {
            queryParameters = queryParameters.set('archived', <any>archived);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmContactsPopulated>(`${this.basePath}/crm/contacts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get crm-locations.
     * Get crm-locations. Default access - resource:owner.
     * @param archived Archived.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrmLocations(archived?: boolean, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<CrmLocationsPopulated>;
    public getCrmLocations(archived?: boolean, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmLocationsPopulated>>;
    public getCrmLocations(archived?: boolean, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmLocationsPopulated>>;
    public getCrmLocations(archived?: boolean, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (archived !== undefined && archived !== null) {
            queryParameters = queryParameters.set('archived', <any>archived);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CrmLocationsPopulated>(`${this.basePath}/crm/locations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account.
     * Update crm-account. Default access - resource:owner. - The link of contacts &amp; locations would be reset on link update. - The contacts &amp; locations would be archived if account gets archived.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccount(id: string, payload: CrmAccountBase, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountBasePopulated>;
    public updateCrmAccount(id: string, payload: CrmAccountBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountBasePopulated>>;
    public updateCrmAccount(id: string, payload: CrmAccountBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountBasePopulated>>;
    public updateCrmAccount(id: string, payload: CrmAccountBase, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccount.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccount.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountBasePopulated>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account contact.
     * Update crm-account contact. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param contactId Crm-contact id - hex, ref Crm-Contacts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountContact(id: string, contactId: string, payload: CrmAccountContactBase, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountContactBasePopulated>;
    public updateCrmAccountContact(id: string, contactId: string, payload: CrmAccountContactBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountContactBasePopulated>>;
    public updateCrmAccountContact(id: string, contactId: string, payload: CrmAccountContactBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountContactBasePopulated>>;
    public updateCrmAccountContact(id: string, contactId: string, payload: CrmAccountContactBase, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountContact.');
        }

        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling updateCrmAccountContact.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountContact.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountContactBasePopulated>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/contacts/${encodeURIComponent(String(contactId))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account contact labels.
     * Update crm-account contact labels. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param contactId Crm-contact id - hex, ref Crm-Contacts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountContactLabels(id: string, contactId: string, payload: CrmAccountContactLabels, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountContactLabelsPopulated>;
    public updateCrmAccountContactLabels(id: string, contactId: string, payload: CrmAccountContactLabels, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountContactLabelsPopulated>>;
    public updateCrmAccountContactLabels(id: string, contactId: string, payload: CrmAccountContactLabels, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountContactLabelsPopulated>>;
    public updateCrmAccountContactLabels(id: string, contactId: string, payload: CrmAccountContactLabels, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountContactLabels.');
        }

        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling updateCrmAccountContactLabels.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountContactLabels.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountContactLabelsPopulated>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/contacts/${encodeURIComponent(String(contactId))}/labels`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account contact sales-info.
     * Update crm-account contact sales-info. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param contactId Crm-contact id - hex, ref Crm-Contacts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountContactSalesInfo(id: string, contactId: string, payload: CrmAccountContactSalesInfo, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountContactSalesInfo>;
    public updateCrmAccountContactSalesInfo(id: string, contactId: string, payload: CrmAccountContactSalesInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountContactSalesInfo>>;
    public updateCrmAccountContactSalesInfo(id: string, contactId: string, payload: CrmAccountContactSalesInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountContactSalesInfo>>;
    public updateCrmAccountContactSalesInfo(id: string, contactId: string, payload: CrmAccountContactSalesInfo, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountContactSalesInfo.');
        }

        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling updateCrmAccountContactSalesInfo.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountContactSalesInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountContactSalesInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/contacts/${encodeURIComponent(String(contactId))}/sales-info`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account credit-info.
     * Update crm-account credit-info. Default access - none.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountCreditInfo(id: string, payload: CrmAccountCreditInfo, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountCreditInfo>;
    public updateCrmAccountCreditInfo(id: string, payload: CrmAccountCreditInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountCreditInfo>>;
    public updateCrmAccountCreditInfo(id: string, payload: CrmAccountCreditInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountCreditInfo>>;
    public updateCrmAccountCreditInfo(id: string, payload: CrmAccountCreditInfo, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountCreditInfo.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountCreditInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountCreditInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/credit-info`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account labels.
     * Update crm-account labels. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountLabels(id: string, payload: CrmAccountLabels, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountLabelsPopulated>;
    public updateCrmAccountLabels(id: string, payload: CrmAccountLabels, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountLabelsPopulated>>;
    public updateCrmAccountLabels(id: string, payload: CrmAccountLabels, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountLabelsPopulated>>;
    public updateCrmAccountLabels(id: string, payload: CrmAccountLabels, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountLabels.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountLabels.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountLabelsPopulated>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/labels`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account location.
     * Update crm-account location. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param locationId Crm-location id - hex, ref Crm-Locations.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountLocation(id: string, locationId: string, payload: CrmAccountLocationBase, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountLocationBasePopulated>;
    public updateCrmAccountLocation(id: string, locationId: string, payload: CrmAccountLocationBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountLocationBasePopulated>>;
    public updateCrmAccountLocation(id: string, locationId: string, payload: CrmAccountLocationBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountLocationBasePopulated>>;
    public updateCrmAccountLocation(id: string, locationId: string, payload: CrmAccountLocationBase, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountLocation.');
        }

        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateCrmAccountLocation.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountLocation.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountLocationBasePopulated>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/locations/${encodeURIComponent(String(locationId))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account location labels.
     * Update crm-account location labels. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param locationId Crm-location id - hex, ref Crm-Locations.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountLocationLabels(id: string, locationId: string, payload: CrmAccountLocationLabels, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountLocationLabelsPopulated>;
    public updateCrmAccountLocationLabels(id: string, locationId: string, payload: CrmAccountLocationLabels, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountLocationLabelsPopulated>>;
    public updateCrmAccountLocationLabels(id: string, locationId: string, payload: CrmAccountLocationLabels, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountLocationLabelsPopulated>>;
    public updateCrmAccountLocationLabels(id: string, locationId: string, payload: CrmAccountLocationLabels, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountLocationLabels.');
        }

        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateCrmAccountLocationLabels.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountLocationLabels.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountLocationLabelsPopulated>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/locations/${encodeURIComponent(String(locationId))}/labels`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account location sales-info.
     * Update crm-account location sales-info. Default access - resource:owner.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param locationId Crm-location id - hex, ref Crm-Locations.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountLocationSalesInfo(id: string, locationId: string, payload: CrmAccountLocationSalesInfo, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountLocationSalesInfo>;
    public updateCrmAccountLocationSalesInfo(id: string, locationId: string, payload: CrmAccountLocationSalesInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountLocationSalesInfo>>;
    public updateCrmAccountLocationSalesInfo(id: string, locationId: string, payload: CrmAccountLocationSalesInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountLocationSalesInfo>>;
    public updateCrmAccountLocationSalesInfo(id: string, locationId: string, payload: CrmAccountLocationSalesInfo, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountLocationSalesInfo.');
        }

        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateCrmAccountLocationSalesInfo.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountLocationSalesInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountLocationSalesInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/locations/${encodeURIComponent(String(locationId))}/sales-info`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account payment-info.
     * Update crm-account payment-info. Default access - none.
     * @param id Crm-account id - hex, ref Crm-Accounts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountPaymentInfo(id: string, payload: CrmAccountPaymentInfo, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountPaymentInfo>;
    public updateCrmAccountPaymentInfo(id: string, payload: CrmAccountPaymentInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountPaymentInfo>>;
    public updateCrmAccountPaymentInfo(id: string, payload: CrmAccountPaymentInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountPaymentInfo>>;
    public updateCrmAccountPaymentInfo(id: string, payload: CrmAccountPaymentInfo, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountPaymentInfo.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountPaymentInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountPaymentInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/payment-info`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update crm-account sales-info.
     * Update crm-account sales-info. Default access - resource:owner.
     * @param id Crm-account id - 24, ref Crm-Accounts.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCrmAccountSalesInfo(id: string, payload: CrmAccountSalesInfo, observe?: 'body', reportProgress?: boolean): Observable<CrmAccountSalesInfo>;
    public updateCrmAccountSalesInfo(id: string, payload: CrmAccountSalesInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmAccountSalesInfo>>;
    public updateCrmAccountSalesInfo(id: string, payload: CrmAccountSalesInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmAccountSalesInfo>>;
    public updateCrmAccountSalesInfo(id: string, payload: CrmAccountSalesInfo, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCrmAccountSalesInfo.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCrmAccountSalesInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CrmAccountSalesInfo>(`${this.basePath}/crm/accounts/${encodeURIComponent(String(id))}/sales-info`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
