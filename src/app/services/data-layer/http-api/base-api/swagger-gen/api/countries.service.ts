/**
 * Base API
 * Base API Definition.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hambardzumyan.albert@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CountriesSummary } from '../model/countriesSummary';
import { State } from '../model/state';
import { StatesSummary } from '../model/statesSummary';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CountriesService {

    protected basePath = 'http://base-api-development.buychain.tech/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get countries.
     * Get countries. Access - member.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountries(observe?: 'body', reportProgress?: boolean): Observable<CountriesSummary>;
    public getCountries(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CountriesSummary>>;
    public getCountries(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CountriesSummary>>;
    public getCountries(observe: any = 'body', reportProgress = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oAuth2Security) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CountriesSummary>(`${this.basePath}/countries`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get country state.
     * Get country state. Access - member.
     * @param id The country id - string, hex 24, ref Countries
     * @param stateId The state id - string, hex 24, ref Countries.states
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountryState(id: string, stateId: string, observe?: 'body', reportProgress?: boolean): Observable<State>;
    public getCountryState(id: string, stateId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<State>>;
    public getCountryState(id: string, stateId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<State>>;
    public getCountryState(id: string, stateId: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCountryState.');
        }

        if (stateId === null || stateId === undefined) {
            throw new Error('Required parameter stateId was null or undefined when calling getCountryState.');
        }

        let headers = this.defaultHeaders;

        // authentication (oAuth2Security) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<State>(`${this.basePath}/countries/${encodeURIComponent(String(id))}/states/${encodeURIComponent(String(stateId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get country states.
     * Get country states. Access - member.
     * @param id The country id - string, hex 24, ref Countries
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountryStates(id: string, observe?: 'body', reportProgress?: boolean): Observable<StatesSummary>;
    public getCountryStates(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StatesSummary>>;
    public getCountryStates(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StatesSummary>>;
    public getCountryStates(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCountryStates.');
        }

        let headers = this.defaultHeaders;

        // authentication (oAuth2Security) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<StatesSummary>(`${this.basePath}/countries/${encodeURIComponent(String(id))}/states`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
