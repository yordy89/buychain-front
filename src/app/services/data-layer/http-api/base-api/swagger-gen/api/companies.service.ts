/**
 * Base API
 * Base API Definition.
 *
 * OpenAPI spec version: 0.316.0
 * Contact: hambardzumyan.albert@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CompaniesSummary } from '../model/companiesSummary';
import { Company } from '../model/company';
import { CompanyAccountingPractices } from '../model/companyAccountingPractices';
import { CompanyAccountingPracticesDefaultAccounts } from '../model/companyAccountingPracticesDefaultAccounts';
import { CompanyDetails } from '../model/companyDetails';
import { CompanyMember } from '../model/companyMember';
import { CompanyMemberAccountState } from '../model/companyMemberAccountState';
import { CompanyMemberGroup } from '../model/companyMemberGroup';
import { CompanyMemberPasswordPayload } from '../model/companyMemberPasswordPayload';
import { CompanyMembers } from '../model/companyMembers';
import { CompanyMembersSummary } from '../model/companyMembersSummary';
import { CompanyPendingMemberAddPayload } from '../model/companyPendingMemberAddPayload';
import { CompanyPendingMemberApprovalPayload } from '../model/companyPendingMemberApprovalPayload';
import { CompanyPendingMembers } from '../model/companyPendingMembers';
import { CompanyPrivacySettings } from '../model/companyPrivacySettings';
import { CompanySalesPractices } from '../model/companySalesPractices';
import { User } from '../model/user';
import { UserAccessControlRoles } from '../model/userAccessControlRoles';
import { UserPermissions } from '../model/userPermissions';
import { UserPrivacySettings } from '../model/userPrivacySettings';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CompaniesService {

    protected basePath = 'http://base-api-development.buychain.tech/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add company pending-member.
     * Add company pending-member. Access - member. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCompanyPendingMember(id: string, payload: CompanyPendingMemberAddPayload, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addCompanyPendingMember(id: string, payload: CompanyPendingMemberAddPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addCompanyPendingMember(id: string, payload: CompanyPendingMemberAddPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addCompanyPendingMember(id: string, payload: CompanyPendingMemberAddPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addCompanyPendingMember.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addCompanyPendingMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/pending-members`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add company pending-member disapproval.
     * Add company pending-member disapproval. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param pendingMemberId Member id - hex, ref Users.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCompanyPendingMemberDisapproval(id: string, pendingMemberId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addCompanyPendingMemberDisapproval(id: string, pendingMemberId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addCompanyPendingMemberDisapproval(id: string, pendingMemberId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addCompanyPendingMemberDisapproval(id: string, pendingMemberId: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addCompanyPendingMemberDisapproval.');
        }

        if (pendingMemberId === null || pendingMemberId === undefined) {
            throw new Error('Required parameter pendingMemberId was null or undefined when calling addCompanyPendingMemberDisapproval.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/pending-members/${encodeURIComponent(String(pendingMemberId))}/disapproval`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add company pending-member approval.
     * Add company pending-member approval. Default access - none. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companyPendingMemberApproval(id: string, memberId: string, payload: CompanyPendingMemberApprovalPayload, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public companyPendingMemberApproval(id: string, memberId: string, payload: CompanyPendingMemberApprovalPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public companyPendingMemberApproval(id: string, memberId: string, payload: CompanyPendingMemberApprovalPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public companyPendingMemberApproval(id: string, memberId: string, payload: CompanyPendingMemberApprovalPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling companyPendingMemberApproval.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling companyPendingMemberApproval.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling companyPendingMemberApproval.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/pending-members/${encodeURIComponent(String(memberId))}/approval`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get companies summary.
     * Get companies summary. Access - member. - The company listing should be enabled. - The company state should be ACTIVE.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompaniesSummary(limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<CompaniesSummary>;
    public getCompaniesSummary(limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompaniesSummary>>;
    public getCompaniesSummary(limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompaniesSummary>>;
    public getCompaniesSummary(limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CompaniesSummary>(`${this.basePath}/companies/summary`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get company.
     * Get company. Default access - company:member. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompany(id: string, observe?: 'body', reportProgress?: boolean): Observable<CompanyDetails>;
    public getCompany(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyDetails>>;
    public getCompany(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyDetails>>;
    public getCompany(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCompany.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CompanyDetails>(`${this.basePath}/companies/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get company member.
     * Get company member. Default access - company:member.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompanyMember(id: string, memberId: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getCompanyMember(id: string, memberId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getCompanyMember(id: string, memberId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getCompanyMember(id: string, memberId: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCompanyMember.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling getCompanyMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<User>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get company members.
     * Get company members. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompanyMembers(id: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<CompanyMembers>;
    public getCompanyMembers(id: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyMembers>>;
    public getCompanyMembers(id: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyMembers>>;
    public getCompanyMembers(id: string, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCompanyMembers.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CompanyMembers>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get company members summary.
     * Get company members. Access - member. - Listing enabled company members will be fetched only.
     * @param id Company id - hex, ref Companies.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompanyMembersSummary(id: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<CompanyMembersSummary>;
    public getCompanyMembersSummary(id: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyMembersSummary>>;
    public getCompanyMembersSummary(id: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyMembersSummary>>;
    public getCompanyMembersSummary(id: string, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCompanyMembersSummary.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CompanyMembersSummary>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/summary`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get company pending-members.
     * Get company pending-members. Default access - none. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompanyPendingMembers(id: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<CompanyPendingMembers>;
    public getCompanyPendingMembers(id: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyPendingMembers>>;
    public getCompanyPendingMembers(id: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyPendingMembers>>;
    public getCompanyPendingMembers(id: string, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCompanyPendingMembers.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<CompanyPendingMembers>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/pending-members`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company.
     * Update company. Default access - none. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompany(id: string, payload: Company, observe?: 'body', reportProgress?: boolean): Observable<Company>;
    public updateCompany(id: string, payload: Company, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Company>>;
    public updateCompany(id: string, payload: Company, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Company>>;
    public updateCompany(id: string, payload: Company, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompany.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompany.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Company>(`${this.basePath}/companies/${encodeURIComponent(String(id))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company accounting-practices.
     * Update company accounting-practices. Default access - none. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyAccountingPractices(id: string, payload: CompanyAccountingPractices, observe?: 'body', reportProgress?: boolean): Observable<CompanyAccountingPractices>;
    public updateCompanyAccountingPractices(id: string, payload: CompanyAccountingPractices, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyAccountingPractices>>;
    public updateCompanyAccountingPractices(id: string, payload: CompanyAccountingPractices, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyAccountingPractices>>;
    public updateCompanyAccountingPractices(id: string, payload: CompanyAccountingPractices, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyAccountingPractices.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyAccountingPractices.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CompanyAccountingPractices>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/accounting-practices`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company accounting-practices default-accounts.
     * Update company accounting-practices default-accounts. Default access - none. - The default-account should be valid based on predefined rules (see lib). - The default-account should not be a system account. - The default-account should not be an archived account. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyAccountingPracticesDefaultAccounts(id: string, payload: CompanyAccountingPracticesDefaultAccounts, observe?: 'body', reportProgress?: boolean): Observable<CompanyAccountingPracticesDefaultAccounts>;
    public updateCompanyAccountingPracticesDefaultAccounts(id: string, payload: CompanyAccountingPracticesDefaultAccounts, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyAccountingPracticesDefaultAccounts>>;
    public updateCompanyAccountingPracticesDefaultAccounts(id: string, payload: CompanyAccountingPracticesDefaultAccounts, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyAccountingPracticesDefaultAccounts>>;
    public updateCompanyAccountingPracticesDefaultAccounts(id: string, payload: CompanyAccountingPracticesDefaultAccounts, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyAccountingPracticesDefaultAccounts.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyAccountingPracticesDefaultAccounts.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CompanyAccountingPracticesDefaultAccounts>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/accounting-practices/default-accounts`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company member.
     * Update company member. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyMember(id: string, memberId: string, payload: User, observe?: 'body', reportProgress?: boolean): Observable<CompanyMember>;
    public updateCompanyMember(id: string, memberId: string, payload: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyMember>>;
    public updateCompanyMember(id: string, memberId: string, payload: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyMember>>;
    public updateCompanyMember(id: string, memberId: string, payload: User, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyMember.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateCompanyMember.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CompanyMember>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company member access-control-roles.
     * Update company member access-control-roles. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyMemberAccessControlRoles(id: string, memberId: string, payload: UserAccessControlRoles, observe?: 'body', reportProgress?: boolean): Observable<UserAccessControlRoles>;
    public updateCompanyMemberAccessControlRoles(id: string, memberId: string, payload: UserAccessControlRoles, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserAccessControlRoles>>;
    public updateCompanyMemberAccessControlRoles(id: string, memberId: string, payload: UserAccessControlRoles, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserAccessControlRoles>>;
    public updateCompanyMemberAccessControlRoles(id: string, memberId: string, payload: UserAccessControlRoles, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyMemberAccessControlRoles.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateCompanyMemberAccessControlRoles.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyMemberAccessControlRoles.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<UserAccessControlRoles>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}/access-control-roles`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company member account-state.
     * Update company member account-state. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyMemberAccountState(id: string, memberId: string, payload: CompanyMemberAccountState, observe?: 'body', reportProgress?: boolean): Observable<CompanyMemberAccountState>;
    public updateCompanyMemberAccountState(id: string, memberId: string, payload: CompanyMemberAccountState, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyMemberAccountState>>;
    public updateCompanyMemberAccountState(id: string, memberId: string, payload: CompanyMemberAccountState, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyMemberAccountState>>;
    public updateCompanyMemberAccountState(id: string, memberId: string, payload: CompanyMemberAccountState, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyMemberAccountState.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateCompanyMemberAccountState.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyMemberAccountState.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CompanyMemberAccountState>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}/account-state`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company member group.
     * Update company member group. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyMemberGroup(id: string, memberId: string, payload: CompanyMemberGroup, observe?: 'body', reportProgress?: boolean): Observable<CompanyMemberGroup>;
    public updateCompanyMemberGroup(id: string, memberId: string, payload: CompanyMemberGroup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyMemberGroup>>;
    public updateCompanyMemberGroup(id: string, memberId: string, payload: CompanyMemberGroup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyMemberGroup>>;
    public updateCompanyMemberGroup(id: string, memberId: string, payload: CompanyMemberGroup, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyMemberGroup.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateCompanyMemberGroup.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyMemberGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CompanyMemberGroup>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}/group`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company member password.
     * Update company member password. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyMemberPassword(id: string, memberId: string, payload: CompanyMemberPasswordPayload, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateCompanyMemberPassword(id: string, memberId: string, payload: CompanyMemberPasswordPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateCompanyMemberPassword(id: string, memberId: string, payload: CompanyMemberPasswordPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateCompanyMemberPassword(id: string, memberId: string, payload: CompanyMemberPasswordPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyMemberPassword.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateCompanyMemberPassword.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyMemberPassword.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}/password`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company member permissions.
     * Update company member permissions. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyMemberPermissions(id: string, memberId: string, payload: UserPermissions, observe?: 'body', reportProgress?: boolean): Observable<UserPermissions>;
    public updateCompanyMemberPermissions(id: string, memberId: string, payload: UserPermissions, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPermissions>>;
    public updateCompanyMemberPermissions(id: string, memberId: string, payload: UserPermissions, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPermissions>>;
    public updateCompanyMemberPermissions(id: string, memberId: string, payload: UserPermissions, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyMemberPermissions.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateCompanyMemberPermissions.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyMemberPermissions.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<UserPermissions>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}/permissions`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company member privacy-settings.
     * Update company member privacy-settings. Default access - none.
     * @param id Company id - hex, ref Companies.
     * @param memberId Member id - hex, ref Users.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyMemberPrivacySettings(id: string, memberId: string, payload: UserPrivacySettings, observe?: 'body', reportProgress?: boolean): Observable<UserPrivacySettings>;
    public updateCompanyMemberPrivacySettings(id: string, memberId: string, payload: UserPrivacySettings, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPrivacySettings>>;
    public updateCompanyMemberPrivacySettings(id: string, memberId: string, payload: UserPrivacySettings, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPrivacySettings>>;
    public updateCompanyMemberPrivacySettings(id: string, memberId: string, payload: UserPrivacySettings, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyMemberPrivacySettings.');
        }

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateCompanyMemberPrivacySettings.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyMemberPrivacySettings.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<UserPrivacySettings>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/members/${encodeURIComponent(String(memberId))}/privacy-settings`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company privacy-settings.
     * Update company privacy-settings. Default access - none. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyPrivacySettings(id: string, payload: CompanyPrivacySettings, observe?: 'body', reportProgress?: boolean): Observable<CompanyPrivacySettings>;
    public updateCompanyPrivacySettings(id: string, payload: CompanyPrivacySettings, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyPrivacySettings>>;
    public updateCompanyPrivacySettings(id: string, payload: CompanyPrivacySettings, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyPrivacySettings>>;
    public updateCompanyPrivacySettings(id: string, payload: CompanyPrivacySettings, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanyPrivacySettings.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanyPrivacySettings.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CompanyPrivacySettings>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/privacy-settings`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update company sales-practices.
     * Update company sales-practices. Default access - none. - The company state should be ACTIVE.
     * @param id Company id - hex, ref Companies.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanySalesPractices(id: string, payload: CompanySalesPractices, observe?: 'body', reportProgress?: boolean): Observable<CompanySalesPractices>;
    public updateCompanySalesPractices(id: string, payload: CompanySalesPractices, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanySalesPractices>>;
    public updateCompanySalesPractices(id: string, payload: CompanySalesPractices, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanySalesPractices>>;
    public updateCompanySalesPractices(id: string, payload: CompanySalesPractices, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCompanySalesPractices.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateCompanySalesPractices.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CompanySalesPractices>(`${this.basePath}/companies/${encodeURIComponent(String(id))}/sales-practices`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
