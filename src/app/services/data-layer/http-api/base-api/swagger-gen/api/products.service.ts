/**
 * Base API
 * Base API Definition.
 *
 * OpenAPI spec version: 0.316.0
 * Contact: hambardzumyan.albert@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BulkUpdateResponse } from '../model/bulkUpdateResponse';
import { Product } from '../model/product';
import { ProductContractUpdatePayload } from '../model/productContractUpdatePayload';
import { ProductSpecLengthUnits } from '../model/productSpecLengthUnits';
import { ProductUpdateLotPayload } from '../model/productUpdateLotPayload';
import { Products } from '../model/products';
import { ProductsAddBulkPayload } from '../model/productsAddBulkPayload';
import { ProductsUpdateOwnerBulkPayload } from '../model/productsUpdateOwnerBulkPayload';
import { ProductsUpdatePermissionBulkPayload } from '../model/productsUpdatePermissionBulkPayload';
import { ProductsUpdateSalesDataPriceOfMeritBulkPayload } from '../model/productsUpdateSalesDataPriceOfMeritBulkPayload';
import { ProductsUpdateSalesDataShipWeekEstimateBulkPayload } from '../model/productsUpdateSalesDataShipWeekEstimateBulkPayload';
import { ProductsUpdateSalesNotesBulkPayload } from '../model/productsUpdateSalesNotesBulkPayload';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProductsService {

    protected basePath = 'http://base-api-development.buychain.tech/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add product lot.
     * Add product lot. Default access - resource:owner. - The state should be active (one of [ON_ORDER, IN_TRANSIT, ON_HAND]). - The product should not be allocated.
     * @param id Product id - hex, ref Products.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addProductLot(id: string, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public addProductLot(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public addProductLot(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public addProductLot(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addProductLot.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Product>(`${this.basePath}/products/${encodeURIComponent(String(id))}/lot`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add products bulk.
     * Add products bulk. Default access - company:member. - The state would be set DRAFT. - The permission would be set PRIVATE. - The trackingNumber would be generated for each product. - The lot would be generated (the same for all products). - The specShorthand would be generated based on the spec.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addProductsBulk(payload: ProductsAddBulkPayload, observe?: 'body', reportProgress?: boolean): Observable<Products>;
    public addProductsBulk(payload: ProductsAddBulkPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Products>>;
    public addProductsBulk(payload: ProductsAddBulkPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Products>>;
    public addProductsBulk(payload: ProductsAddBulkPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addProductsBulk.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Products>(`${this.basePath}/products/bulk`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update product contract.
     * Update product contract. Default access - resource:owner. - The product contract state should be OPEN. - The product should have a contract.
     * @param id Product id - hex, ref Products.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductContract(id: string, payload: ProductContractUpdatePayload, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public updateProductContract(id: string, payload: ProductContractUpdatePayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public updateProductContract(id: string, payload: ProductContractUpdatePayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public updateProductContract(id: string, payload: ProductContractUpdatePayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateProductContract.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductContract.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Product>(`${this.basePath}/products/${encodeURIComponent(String(id))}/contract`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update product lot.
     * Update product lot. Default access - resource:owner. - The product state should be active (one of [ON_ORDER, IN_TRANSIT, ON_HAND]). - The product should not be allocated. - The target and source product properties should match. Ignored fields [acquiredTransactionId, allocatedTransactionId, brokerContract, createdAt, dateHistory, log, lot, permission, priceHistory, purchasedLot, salesData, salesNotes, soldTransactionId, supplyContract, trackingNumber, updatedAt]. - The product would inherit the following fields from the target product [permission, salesData, salesNotes, lot].
     * @param id Product id - hex, ref Products.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductLot(id: string, payload: ProductUpdateLotPayload, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public updateProductLot(id: string, payload: ProductUpdateLotPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public updateProductLot(id: string, payload: ProductUpdateLotPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public updateProductLot(id: string, payload: ProductUpdateLotPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateProductLot.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductLot.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Product>(`${this.basePath}/products/${encodeURIComponent(String(id))}/lot`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update product spec length-units.
     * Update product spec length-units. Default access - resource:owner. - The product state should be DRAFT.
     * @param id Product id - hex, ref Products.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductSpecLengthUnits(id: string, payload: ProductSpecLengthUnits, observe?: 'body', reportProgress?: boolean): Observable<ProductSpecLengthUnits>;
    public updateProductSpecLengthUnits(id: string, payload: ProductSpecLengthUnits, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductSpecLengthUnits>>;
    public updateProductSpecLengthUnits(id: string, payload: ProductSpecLengthUnits, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductSpecLengthUnits>>;
    public updateProductSpecLengthUnits(id: string, payload: ProductSpecLengthUnits, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateProductSpecLengthUnits.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductSpecLengthUnits.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ProductSpecLengthUnits>(`${this.basePath}/products/${encodeURIComponent(String(id))}/spec/length-units`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update products owner bulk.
     * Update products owner bulk. Default access - resource:owner. - The owner should be a company member. - The state should be active (one of [ON_ORDER, IN_TRANSIT, ON_HAND]). - The product should not be allocated.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductsOwnerBulk(payload: ProductsUpdateOwnerBulkPayload, observe?: 'body', reportProgress?: boolean): Observable<BulkUpdateResponse>;
    public updateProductsOwnerBulk(payload: ProductsUpdateOwnerBulkPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkUpdateResponse>>;
    public updateProductsOwnerBulk(payload: ProductsUpdateOwnerBulkPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkUpdateResponse>>;
    public updateProductsOwnerBulk(payload: ProductsUpdateOwnerBulkPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductsOwnerBulk.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BulkUpdateResponse>(`${this.basePath}/products/owner/bulk`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update products permission bulk.
     * Update products permission bulk. Default access - resource:owner. - The state should be active (one of [ON_ORDER, IN_TRANSIT, ON_HAND]). - The product should not be allocated.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductsPermissionBulk(payload: ProductsUpdatePermissionBulkPayload, observe?: 'body', reportProgress?: boolean): Observable<BulkUpdateResponse>;
    public updateProductsPermissionBulk(payload: ProductsUpdatePermissionBulkPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkUpdateResponse>>;
    public updateProductsPermissionBulk(payload: ProductsUpdatePermissionBulkPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkUpdateResponse>>;
    public updateProductsPermissionBulk(payload: ProductsUpdatePermissionBulkPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductsPermissionBulk.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BulkUpdateResponse>(`${this.basePath}/products/permission/bulk`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update products sales-data price-of-merit bulk.
     * Update products sales-data price-of-merit bulk. Default access - resource:owner. - The state should be active (one of [ON_ORDER, IN_TRANSIT, ON_HAND]). - The product should not be allocated.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductsSalesDataPriceOfMeritBulk(payload: ProductsUpdateSalesDataPriceOfMeritBulkPayload, observe?: 'body', reportProgress?: boolean): Observable<BulkUpdateResponse>;
    public updateProductsSalesDataPriceOfMeritBulk(payload: ProductsUpdateSalesDataPriceOfMeritBulkPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkUpdateResponse>>;
    public updateProductsSalesDataPriceOfMeritBulk(payload: ProductsUpdateSalesDataPriceOfMeritBulkPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkUpdateResponse>>;
    public updateProductsSalesDataPriceOfMeritBulk(payload: ProductsUpdateSalesDataPriceOfMeritBulkPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductsSalesDataPriceOfMeritBulk.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BulkUpdateResponse>(`${this.basePath}/products/sales-data/price-of-merit/bulk`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update products sales-data ship-week-estimate bulk.
     * Update products sales-data ship-week-estimate bulk. Default access - resource:owner. - The state should be active (one of [ON_ORDER, IN_TRANSIT, ON_HAND]). - The product should not be allocated.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductsSalesDataShipWeekEstimateBulk(payload: ProductsUpdateSalesDataShipWeekEstimateBulkPayload, observe?: 'body', reportProgress?: boolean): Observable<BulkUpdateResponse>;
    public updateProductsSalesDataShipWeekEstimateBulk(payload: ProductsUpdateSalesDataShipWeekEstimateBulkPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkUpdateResponse>>;
    public updateProductsSalesDataShipWeekEstimateBulk(payload: ProductsUpdateSalesDataShipWeekEstimateBulkPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkUpdateResponse>>;
    public updateProductsSalesDataShipWeekEstimateBulk(payload: ProductsUpdateSalesDataShipWeekEstimateBulkPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductsSalesDataShipWeekEstimateBulk.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BulkUpdateResponse>(`${this.basePath}/products/sales-data/ship-week-estimate/bulk`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update products sales-notes bulk.
     * Update products sales-notes bulk. Default access - resource:owner. - The state should be active (one of [ON_ORDER, IN_TRANSIT, ON_HAND]). - The product should not be allocated.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductsSalesNotesBulk(payload: ProductsUpdateSalesNotesBulkPayload, observe?: 'body', reportProgress?: boolean): Observable<BulkUpdateResponse>;
    public updateProductsSalesNotesBulk(payload: ProductsUpdateSalesNotesBulkPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkUpdateResponse>>;
    public updateProductsSalesNotesBulk(payload: ProductsUpdateSalesNotesBulkPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkUpdateResponse>>;
    public updateProductsSalesNotesBulk(payload: ProductsUpdateSalesNotesBulkPayload, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateProductsSalesNotesBulk.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BulkUpdateResponse>(`${this.basePath}/products/sales-notes/bulk`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
