/**
 * Base API
 * Base API Definition.
 *
 * OpenAPI spec version: 0.316.0
 * Contact: hambardzumyan.albert@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { RateTable } from '../model/rateTable';
import { RateTableEntries } from '../model/rateTableEntries';
import { RateTableEntriesBulk } from '../model/rateTableEntriesBulk';
import { RateTableEntriesBulkResponse } from '../model/rateTableEntriesBulkResponse';
import { RateTableEntry } from '../model/rateTableEntry';
import { RateTableEntryBase } from '../model/rateTableEntryBase';
import { RateTables } from '../model/rateTables';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RateTablesService {

    protected basePath = 'http://base-api-development.buychain.tech/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add rate-table.
     * Add rate-table. Default access - none.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRateTable(payload: RateTable, observe?: 'body', reportProgress?: boolean): Observable<RateTable>;
    public addRateTable(payload: RateTable, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTable>>;
    public addRateTable(payload: RateTable, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTable>>;
    public addRateTable(payload: RateTable, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addRateTable.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RateTable>(`${this.basePath}/rate-tables`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add rate-table clone.
     * Add rate-table clone. Default access - none.
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRateTableClone(id: string, observe?: 'body', reportProgress?: boolean): Observable<RateTable>;
    public addRateTableClone(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTable>>;
    public addRateTableClone(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTable>>;
    public addRateTableClone(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addRateTableClone.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<RateTable>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}/clone`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add rate-table entries bulk.
     * Add rate-table entries bulk. Default access - none. - The country should be from the list of supported countries (see constant-data). - The state should be from the list of supported states (see constant-data). - The city should be from the list of supported cities (see constant-data). - The carrier should be from the list of supported carriers (see constant-data).
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRateTableEntriesBulk(id: string, payload: RateTableEntriesBulk, observe?: 'body', reportProgress?: boolean): Observable<RateTableEntriesBulkResponse>;
    public addRateTableEntriesBulk(id: string, payload: RateTableEntriesBulk, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTableEntriesBulkResponse>>;
    public addRateTableEntriesBulk(id: string, payload: RateTableEntriesBulk, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTableEntriesBulkResponse>>;
    public addRateTableEntriesBulk(id: string, payload: RateTableEntriesBulk, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addRateTableEntriesBulk.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addRateTableEntriesBulk.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RateTableEntriesBulkResponse>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}/entries/bulk`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add rate-table entry.
     * Add rate-table entry. Default access - none. - The carrier should be from the list of supported carriers (see constant-data).
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRateTableEntry(id: string, payload: RateTableEntry, observe?: 'body', reportProgress?: boolean): Observable<RateTableEntry>;
    public addRateTableEntry(id: string, payload: RateTableEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTableEntry>>;
    public addRateTableEntry(id: string, payload: RateTableEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTableEntry>>;
    public addRateTableEntry(id: string, payload: RateTableEntry, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addRateTableEntry.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addRateTableEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RateTableEntry>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}/entries`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete rate-table.
     * Delete rate-table. Default access - none. - Should have NO usage in facilities.
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRateTable(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRateTable(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRateTable(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRateTable(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRateTable.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete rate-table entry.
     * Delete rate-table entry. Default access - none.
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param entryId Entry id - hex, ref Rate-Tables.entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRateTableEntry(id: string, entryId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRateTableEntry(id: string, entryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRateTableEntry(id: string, entryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRateTableEntry(id: string, entryId: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRateTableEntry.');
        }

        if (entryId === null || entryId === undefined) {
            throw new Error('Required parameter entryId was null or undefined when calling deleteRateTableEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}/entries/${encodeURIComponent(String(entryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get rate-table entries.
     * Get rate-table entries. Access - member.
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRateTableEntries(id: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<RateTableEntries>;
    public getRateTableEntries(id: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTableEntries>>;
    public getRateTableEntries(id: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTableEntries>>;
    public getRateTableEntries(id: string, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRateTableEntries.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<RateTableEntries>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}/entries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get rate-tables.
     * Get rate-tables. Access - member.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRateTables(limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<RateTables>;
    public getRateTables(limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTables>>;
    public getRateTables(limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTables>>;
    public getRateTables(limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<RateTables>(`${this.basePath}/rate-tables`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update rate-table.
     * Update rate-table. Default access - none.
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRateTable(id: string, payload: RateTable, observe?: 'body', reportProgress?: boolean): Observable<RateTable>;
    public updateRateTable(id: string, payload: RateTable, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTable>>;
    public updateRateTable(id: string, payload: RateTable, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTable>>;
    public updateRateTable(id: string, payload: RateTable, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateRateTable.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateRateTable.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<RateTable>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update rate-table entry.
     * Update rate-table entry. Default access - none.
     * @param id Rate-table id - hex, ref Rate-Tables.
     * @param entryId Entry id - hex, ref Rate-Tables.entries.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRateTableEntry(id: string, entryId: string, payload: RateTableEntryBase, observe?: 'body', reportProgress?: boolean): Observable<RateTableEntry>;
    public updateRateTableEntry(id: string, entryId: string, payload: RateTableEntryBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateTableEntry>>;
    public updateRateTableEntry(id: string, entryId: string, payload: RateTableEntryBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateTableEntry>>;
    public updateRateTableEntry(id: string, entryId: string, payload: RateTableEntryBase, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateRateTableEntry.');
        }

        if (entryId === null || entryId === undefined) {
            throw new Error('Required parameter entryId was null or undefined when calling updateRateTableEntry.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateRateTableEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<RateTableEntry>(`${this.basePath}/rate-tables/${encodeURIComponent(String(id))}/entries/${encodeURIComponent(String(entryId))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
