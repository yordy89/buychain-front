/**
 * Base API
 * Base API Definition.
 *
 * OpenAPI spec version: 0.316.0
 * Contact: hambardzumyan.albert@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Group } from '../model/group';
import { GroupAccountingInfo } from '../model/groupAccountingInfo';
import { GroupBase } from '../model/groupBase';
import { Groups } from '../model/groups';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GroupsService {

    protected basePath = 'http://base-api-development.buychain.tech/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add group.
     * Add group. Default access - none. - The REAccountId should be an account of type EQUITY (if present). - The REAccountId should be an account of naturalBalance CREDIT (if present). - The REAccountId should not be a system account (if present). - The REAccountId should not be an archived account (if present). - Two inter-company accounts would be created (IC Due From, IC Due To).
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addGroup(payload: Group, observe?: 'body', reportProgress?: boolean): Observable<Group>;
    public addGroup(payload: Group, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Group>>;
    public addGroup(payload: Group, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Group>>;
    public addGroup(payload: Group, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling addGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Group>(`${this.basePath}/groups`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete group.
     * Delete group. Default access - none. - Soft delete. - Two inter-company accounts would be archived (IC Due From, IC Due To).
     * @param id Group id - hex, ref Groups.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGroup(id: string, observe?: 'body', reportProgress?: boolean): Observable<Group>;
    public deleteGroup(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Group>>;
    public deleteGroup(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Group>>;
    public deleteGroup(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Group>(`${this.basePath}/groups/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get group.
     * Get group. Default access - none.
     * @param id Group id - hex, ref Groups.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroup(id: string, observe?: 'body', reportProgress?: boolean): Observable<Group>;
    public getGroup(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Group>>;
    public getGroup(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Group>>;
    public getGroup(id: string, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Group>(`${this.basePath}/groups/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get groups.
     * Get groups. Default access - company:member.
     * @param archived Archived.
     * @param limit Limit - minimum 1, maximum 1000.
     * @param offset Offset - minimum 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroups(archived?: boolean, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<Groups>;
    public getGroups(archived?: boolean, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Groups>>;
    public getGroups(archived?: boolean, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Groups>>;
    public getGroups(archived?: boolean, limit?: number, offset?: number, observe: any = 'body', reportProgress = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (archived !== undefined && archived !== null) {
            queryParameters = queryParameters.set('archived', <any>archived);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Groups>(`${this.basePath}/groups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update group.
     * Update group. Default access - none.
     * @param id Group id - hex, ref Groups.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGroup(id: string, payload: GroupBase, observe?: 'body', reportProgress?: boolean): Observable<GroupBase>;
    public updateGroup(id: string, payload: GroupBase, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupBase>>;
    public updateGroup(id: string, payload: GroupBase, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupBase>>;
    public updateGroup(id: string, payload: GroupBase, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateGroup.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<GroupBase>(`${this.basePath}/groups/${encodeURIComponent(String(id))}`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update group accounting-info.
     * Update group accounting-info. Default access - none. - The REAccountId should be an account of type EQUITY (if present). - The REAccountId should be an account of naturalBalance CREDIT (if present). - The REAccountId should not be a system account (if present). - The REAccountId should not be an archived account (if present).
     * @param id Group id - hex, ref Groups.
     * @param payload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGroupAccountingInfo(id: string, payload: GroupAccountingInfo, observe?: 'body', reportProgress?: boolean): Observable<GroupAccountingInfo>;
    public updateGroupAccountingInfo(id: string, payload: GroupAccountingInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupAccountingInfo>>;
    public updateGroupAccountingInfo(id: string, payload: GroupAccountingInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupAccountingInfo>>;
    public updateGroupAccountingInfo(id: string, payload: GroupAccountingInfo, observe: any = 'body', reportProgress = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateGroupAccountingInfo.');
        }

        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling updateGroupAccountingInfo.');
        }

        let headers = this.defaultHeaders;

        // authentication (AccessToken) required
        if (this.configuration.apiKeys["authorization"]) {
            headers = headers.set('authorization', this.configuration.apiKeys["authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<GroupAccountingInfo>(`${this.basePath}/groups/${encodeURIComponent(String(id))}/accounting-info`,
            payload,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
